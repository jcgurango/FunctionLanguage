using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FunctionLanguage.Exceptions;

namespace FunctionLanguage.Tests
{
    [TestClass]
    public class FLRuntimeTests
    {
        private const string LongArithmeticExpression = "-500 + (-392 - -116 / -463) / (954 + 998) * -584 * (522 + -825) * (438 - 436 + -983) - 546 / 901 + 847 - (504 * 128) * 21 + 931 / -232 + 365 - -11 - -142 / 33 * -730 + -233 + (541 / 510) + -397 + -502 + (762 + 691) + 587 * 143 / -486 * 668 / 4 + (-365 * 223 / 148 + 666 * 599 + (755 / -911 - -670 / -801 / 153 / -634) / (-382 + -344 / (185 / -648) / (420 + 343) / 140) / -172) + 109 / (-43 * -297) - 219 / -26 + 856 + 579 + (-266 - -276) / 621 + (170 + -489) + -931 / (-858 * -432) + (112 + 133) / (-864 + 443) - (-938 + -759 + 743) / (450 - -793) - -346 + (327 + 996 / -367) / (-741 - 483 / 222) / -147 - -439 + -826 + (-528 - 780) / (978 / 963) / 878 + -63 / (-283 * -162) * -242 / 508 / 929 / -531 + 565 * 951 - (-144 + -933) / (-596 / -766) + (788 / -607) - -804 - -222 - 884 / 655 + -627 + (712 / -988 / -133) + -448 - -71 * -980 + 432 + (-258 + -669) + -172 / 858 + (-510 + -267) + -930 + 145 + (564 / -410) + -707 / 364 / (-916 / 286 + 680) * (-726 * -427 / -295 - 646 + (-93 / 888) - -812) * (103 * 457) + 19 / (-920 + 628) - 429 + (205 * -102) + -248 * 807 * -14 * (-199 - -239) * -875 - (182 * 405) + 605 + 592 - -97 / -276 + -667 + (675 + 336) + 580 * 659 / -635 - (916 - 955 - 972) / (-398 + -347) / -35 + 329 + 701 - 830 - (-259 + 760) - -775 + (215 + 562 / 530) + 896 * 347 + -422 - 31 - (-568 * -818) - 824 / (227 / 72) + -202 + (-89 + -359 / -908) + 501 * (334 + -620) * (327 - -484) + -804 / 59 + (-834 + 989 + (893 - 287) + 209) / -925 * -379 / -210 - (400 + -460) / 482 + 269 / 435 + (966 / -764 + 698 + -771 - -315 + 869 * -706 - -275) / 202 - -668 + -400 + -125 - -761 + -775 + 502 / -655 - -167 + (-469 - -202) / (953 + 870) / (40 + -191 * 336) * 304 + -975 * (300 / 292) + 309 * (-143 / -143) - (-71 + 112) * -166 * (924 / 447) * -241 * (-578 - 278) - -327 * -155 + -618 - 184 + -51 + -261 + -825 / -518 / 437 * 403 + -857 / 342 - 987 - 567 - (-412 / -734) - 954 + -769 * -992 - -497 / -647 * (-323 - -814 / 843) * -860 / -537 / 616 - 152 - 564 - -568 + (653 + 129 + -346) / -574 - -653 + 424 + (985 / 819 + -975 * -672 + (-905 - -625) + 760) / 164 + -578 + 437 / -826 / 730 / -55 * (-769 - 937 / -633 / -571) - 836 / 642 + (-268 / -476) / 103 / -817 + (134 * -332) / 452 / (-646 / -864) * (713 / 567 + 534) + 462 + -898 * 729 - (955 + 751) / -700 / 364 + 293 / 12 / 640 * 661 / 856 / 676 / (-897 / -703) + -480 + 915 + (569 + -497 + 187) / 758 - 535 / 505 + 728 / (511 / -684 + -734) + (-847 / 8) / 176 + -197 + 936 / 210 * (54 + -646) / 777 - (264 - -424) * 702 * 663 * 809 + -924 / 531 / -409 * -820 - -69 + 861 - (-84 / 556 + -761 / (-793 * 262) + -168) - -818 + 961 + -691 * -69 + -459 - 806 * 118 - (-680 + 110 / 526) + (151 - 726) + (802 + 964) * (816 - -334 / 594) / -116 / 780 * 131 + -679 / -352 + -362 + 54 - 490 - (136 / 409 - -142 + 374) * 841 + 865 - -799 * -821 * -772 - (71 - 181) - 731 + 51 + -710 / (-640 / -173) + (-97 + -125 + -181 / (776 / 269 - 305) / -538 / -442) / -2 / (849 + 533) + -102 * (698 / 635 + (-16 / 689) + 628) / (-847 / -739) + -268 / -341 - (80 / 45) + 149 * -967 / -551 / (-483 + -5) / 571 / -753 + -152 / 50 + (510 + -373) + -888 / 436 + -861 + (895 - -609) / (859 / -602) - 274 + -997 / 642 / (395 + -43 / -943) + -644 - (-228 + 295) / 91 / 81 * -23 * -468 + (334 * -11 + -844) / 663 / -327 / 228 / 370 / (843 + 365) + 228 * (-850 / 924) / -623 / (-608 / 49 + (-632 / 275 + 50 / -184 - -627) + 34) - -479 - -512 * (756 / -82 + -180 * (372 - 746) + 236) - (-147 / -513 * (877 + 170) + 996) / -144 + 37 * -450 * 661 / 360 - 816 - 833 + 687 * (-420 / 237) + -887 / -612 + -386 / 142 - 496 - (-366 + 351) * 911 + -335 / (-632 - 699 * -734 + 543) * (75 + 508) / 811 / -336 + (-393 / -732) / -764 + -850 + (302 + 236) + 975 * 26 * 977 * 945 - 146 + (324 * -805 / 418) + -179 / -409 / -42 / 641 - 581 + 377 * -970 - 851 * (-275 / 296) / -915 + -244 + (461 / -803) - (205 - -261) / 719 + (254 * 310 - 912) + -978 / 281 + 65 + -795 - -794 / 317 + 701 + -635 + 276 / -919 + (-951 + 446 + -781) / 994 / 429 / 908 + -504 + -468 + (-343 + 193) * 353 + (-157 / -781) + -665 + 604 - 674 + (-895 + 134 / -922 - -644) / 689 * 811 / -240 + -978 / 851 * 581 + -184 / (272 + 454) * (329 + 52 / -379) - -869 / 75 / -369 + 476 + 735 + (-552 / 879) + (-509 / 409 + (423 * 997 * -820) / -377 - -242) / -622 + -878 * -430 * -954 / -246 * (551 / -396) / -539 + (299 / 439)";
        private const double LongArithmeticExpressionResult = -330353815964.9348d;

        private const string LongArithmeticExpressionWithFunctionCalls = "-500 + (-392 - -116 / -463) / TIMESTWO(954 + 998) * -584 * TIMESTWO(522 + -825) * TIMESTWO(438 - 436 + -983) - 546 / 901 + 847 - TIMESTWO(504 * 128) * 21 + 931 / -232 + 365 - -11 - -142 / 33 * -730 + -233 + (541 / 510) + -397 + -502 + TIMESTWO(762 + 691) + 587 * 143 / -486 * 668 / 4 + (-365 * 223 / 148 + 666 * 599 + TIMESTWO(755 / -911 - -670 / -801 / 153 / -634) / TIMESTWO(-382 + -344 / TIMESTWO(185 / -648) / TIMESTWO(420 + 343) / 140) / -172) + 109 / (-43 * -297) - 219 / -26 + 856 + 579 + (-266 - -276) / 621 + TIMESTWO(170 + -489) + -931 / TIMESTWO(-858 * -432) + TIMESTWO(112 + 133) / TIMESTWO(-864 + 443) - (-938 + -759 + 743) / TIMESTWO(450 - -793) - -346 + TIMESTWO(327 + 996 / -367) / TIMESTWO(-741 - 483 / 222) / -147 - -439 + -826 + TIMESTWO(-528 - 780) / TIMESTWO(978 / 963) / 878 + -63 / TIMESTWO(-283 * -162) * -242 / 508 / 929 / -531 + 565 * 951 - TIMESTWO(-144 + -933) / TIMESTWO(-596 / -766) + TIMESTWO(788 / -607) - -804 - -222 - 884 / 655 + -627 + (712 / -988 / -133) + -448 - -71 * -980 + 432 + TIMESTWO(-258 + -669) + -172 / 858 + TIMESTWO(-510 + -267) + -930 + 145 + TIMESTWO(564 / -410) + -707 / 364 / TIMESTWO(-916 / 286 + 680) * TIMESTWO(-726 * -427 / -295 - 646 + TIMESTWO(-93 / 888) - -812) * TIMESTWO(103 * 457) + 19 / TIMESTWO(-920 + 628) - 429 + (205 * -102) + -248 * 807 * -14 * TIMESTWO(-199 - -239) * -875 - (182 * 405) + 605 + 592 - -97 / -276 + -667 + TIMESTWO(675 + 336) + 580 * 659 / -635 - TIMESTWO(916 - 955 - 972) / TIMESTWO(-398 + -347) / -35 + 329 + 701 - 830 - TIMESTWO(-259 + 760) - -775 + TIMESTWO(215 + 562 / 530) + 896 * 347 + -422 - 31 - TIMESTWO(-568 * -818) - 824 / TIMESTWO(227 / 72) + -202 + TIMESTWO(-89 + -359 / -908) + 501 * TIMESTWO(334 + -620) * TIMESTWO(327 - -484) + -804 / 59 + (-834 + 989 + TIMESTWO(893 - 287) + 209) / -925 * -379 / -210 - (400 + -460) / 482 + 269 / 435 + TIMESTWO(966 / -764 + 698 + -771 - -315 + 869 * -706 - -275) / 202 - -668 + -400 + -125 - -761 + -775 + 502 / -655 - -167 + (-469 - -202) / TIMESTWO(953 + 870) / TIMESTWO(40 + -191 * 336) * 304 + -975 * TIMESTWO(300 / 292) + 309 * TIMESTWO(-143 / -143) - TIMESTWO(-71 + 112) * -166 * TIMESTWO(924 / 447) * -241 * TIMESTWO(-578 - 278) - -327 * -155 + -618 - 184 + -51 + -261 + -825 / -518 / 437 * 403 + -857 / 342 - 987 - 567 - TIMESTWO(-412 / -734) - 954 + -769 * -992 - -497 / -647 * TIMESTWO(-323 - -814 / 843) * -860 / -537 / 616 - 152 - 564 - -568 + (653 + 129 + -346) / -574 - -653 + 424 + TIMESTWO(985 / 819 + -975 * -672 + TIMESTWO(-905 - -625) + 760) / 164 + -578 + 437 / -826 / 730 / -55 * TIMESTWO(-769 - 937 / -633 / -571) - 836 / 642 + TIMESTWO(-268 / -476) / 103 / -817 + TIMESTWO(134 * -332) / 452 / TIMESTWO(-646 / -864) * TIMESTWO(713 / 567 + 534) + 462 + -898 * 729 - (955 + 751) / -700 / 364 + 293 / 12 / 640 * 661 / 856 / 676 / TIMESTWO(-897 / -703) + -480 + 915 + (569 + -497 + 187) / 758 - 535 / 505 + 728 / TIMESTWO(511 / -684 + -734) + (-847 / 8) / 176 + -197 + 936 / 210 * (54 + -646) / 777 - TIMESTWO(264 - -424) * 702 * 663 * 809 + -924 / 531 / -409 * -820 - -69 + 861 - TIMESTWO(-84 / 556 + -761 / (-793 * 262) + -168) - -818 + 961 + -691 * -69 + -459 - 806 * 118 - TIMESTWO(-680 + 110 / 526) + TIMESTWO(151 - 726) + TIMESTWO(802 + 964) * (816 - -334 / 594) / -116 / 780 * 131 + -679 / -352 + -362 + 54 - 490 - TIMESTWO(136 / 409 - -142 + 374) * 841 + 865 - -799 * -821 * -772 - TIMESTWO(71 - 181) - 731 + 51 + -710 / TIMESTWO(-640 / -173) + TIMESTWO(-97 + -125 + -181 / TIMESTWO(776 / 269 - 305) / -538 / -442) / -2 / TIMESTWO(849 + 533) + -102 * (698 / 635 + TIMESTWO(-16 / 689) + 628) / TIMESTWO(-847 / -739) + -268 / -341 - TIMESTWO(80 / 45) + 149 * -967 / -551 / TIMESTWO(-483 + -5) / 571 / -753 + -152 / 50 + TIMESTWO(510 + -373) + -888 / 436 + -861 + TIMESTWO(895 - -609) / TIMESTWO(859 / -602) - 274 + -997 / 642 / TIMESTWO(395 + -43 / -943) + -644 - (-228 + 295) / 91 / 81 * -23 * -468 + (334 * -11 + -844) / 663 / -327 / 228 / 370 / TIMESTWO(843 + 365) + 228 * TIMESTWO(-850 / 924) / -623 / TIMESTWO(-608 / 49 + TIMESTWO(-632 / 275 + 50 / -184 - -627) + 34) - -479 - -512 * TIMESTWO(756 / -82 + -180 * (372 - 746) + 236) - (-147 / -513 * TIMESTWO(877 + 170) + 996) / -144 + 37 * -450 * 661 / 360 - 816 - 833 + 687 * (-420 / 237) + -887 / -612 + -386 / 142 - 496 - TIMESTWO(-366 + 351) * 911 + -335 / (-632 - 699 * -734 + 543) * TIMESTWO(75 + 508) / 811 / -336 + TIMESTWO(-393 / -732) / -764 + -850 + TIMESTWO(302 + 236) + 975 * 26 * 977 * 945 - 146 + TIMESTWO(324 * -805 / 418) + -179 / -409 / -42 / 641 - 581 + 377 * -970 - 851 * (-275 / 296) / -915 + -244 + TIMESTWO(461 / -803) - (205 - -261) / 719 + (254 * 310 - 912) + -978 / 281 + 65 + -795 - -794 / 317 + 701 + -635 + 276 / -919 + (-951 + 446 + -781) / 994 / 429 / 908 + -504 + -468 + TIMESTWO(-343 + 193) * 353 + (-157 / -781) + -665 + 604 - 674 + TIMESTWO(-895 + 134 / -922 - -644) / 689 * 811 / -240 + -978 / 851 * 581 + -184 / (272 + 454) * TIMESTWO(329 + 52 / -379) - -869 / 75 / -369 + 476 + 735 + TIMESTWO(-552 / 879) + TIMESTWO(-509 / 409 + TIMESTWO(423 * 997 * -820) / -377 - -242) / -622 + -878 * -430 * -954 / -246 * TIMESTWO(551 / -396) / -539 + (299 / 439)";
        private const double LongArithmeticExpressionWithFunctionCallsResult = -667437880967.9678d;

        public static FLRuntime TestRuntime()
        {
            FLRuntime runtime = new FLRuntime();
            runtime.RegisterFunction("TIMESTWO", (t, a) =>
            {
                return Convert.ToDouble(a[0]) * 2d;
            });

            return runtime;
        }

        [TestMethod]
        public void Execute_LongArithmeticExpression_LargeDoubleNumber()
        {
            FLCompiler compiler = FLCompilerTests.BasicArithmeticTestCompiler();
            FLRuntime runtime = TestRuntime();
            double result = (double)compiler.Execute(LongArithmeticExpression, runtime);
            Assert.AreEqual(LongArithmeticExpressionResult, result);
        }

        [TestMethod]
        public void Execute_LongArithmeticExpressionWithFunctioncalls_LargeDoubleNumber()
        {
            FLCompiler compiler = FLCompilerTests.BasicArithmeticTestCompiler();
            FLRuntime runtime = TestRuntime();
            double result = (double)compiler.Execute(LongArithmeticExpressionWithFunctionCalls, runtime);
            Assert.AreEqual(LongArithmeticExpressionWithFunctionCallsResult, result);
        }

        [TestMethod]
        [ExpectedException(typeof(FunctionAlreadyExistsException))]
        public void RegisterFunction_FunctionWithDuplicateName_ExceptionThrown()
        {
            FLRuntime runtime = TestRuntime();
            runtime.RegisterFunction("TIMESTWO", (t, y) => { return null; });
        }

        [TestMethod]
        [ExpectedException(typeof(FunctionNotFoundException))]
        public void CallFunction_NonExistentFunctionCall_ExceptionThrown()
        {
            FLRuntime runtime = TestRuntime();
            runtime.CallFunction("TIMESTHREE", null, 0.5d);
        }
    }
}
